# KONG COMMAND
# docker run --rm --network=class-spring-boot_kong-net  -e "KONG_DATABASE=postgres"  -e "KONG_PG_HOST=gateway-db"  -e "KONG_PG_PASSWORD=kongpass"  -e "KONG_PASSWORD=test" kong/kong-gateway:3.3.0.0 kong migrations bootstrap --v
# 
# development config
version: "3.3"
services:
  # example.org:
  #   image: nginx:1.23
  #   container_name: nginx
  #   # depends_on:
  #   #   - frontend
  #   tty: true
  #   ports:
  #     - 3000:80
  #   volumes:
  #     - ./access.log:/var/logs/nginx-access.log
  #     - ../js/app-react/dist:/var/www/example.com/public
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ../js/app-react
  #   volumes: 
  #     - npm:/app/app-react/node_modules
  #     - ../js/app-react:/app/app-react
  gateway-db:
    container_name: gateway-db
    image: postgres:13
    restart: on-failure
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kongpass
  gateway:
    container_name: gateway
    image: kong/kong-gateway:3.3.0.0
    # command: ["kong", "migrations", "bootstrap"]
    depends_on:
      - gateway-db
    ports:
      - 8081:8081
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
      - 8002:8002
      - 8445:8445
      - 8003:8003
      - 8004:8004
    networks:
      - kong-net
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=gateway-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://192.168.50.10:8002
      - KONG_LICENSE_DATA=
  app:
    image: eclipse-temurin:17-jdk-focal
    command: bash -c "./mvnw spring-boot:run"
    container_name: spring
    depends_on:
      - db
      - redis
    ports:
      - 7071:8081
    working_dir: /app
    volumes:
      - ./:/app
      - app:/root/.m2
  redis:
    # TODO: set credentials to env
    container_name: spring_vm_redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass authentication
    volumes:
      - redis:/data
  db:
    # TODO: set credentials to env
    container_name: spring_vm_db
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: "app_employee"
      MYSQL_USER: "employeeDB"
      MYSQL_PASSWORD: "employee"
      MYSQL_ROOT_PASSWORD: "password"
    ports:
      - "3306:3306"
    expose:
      - "3306"
    volumes:
      - my-db:/var/lib/mysql
volumes:
  my-db:
  redis:
  app:
  npm:
  kong_data:
networks:
  kong-net:
    name: kong-net